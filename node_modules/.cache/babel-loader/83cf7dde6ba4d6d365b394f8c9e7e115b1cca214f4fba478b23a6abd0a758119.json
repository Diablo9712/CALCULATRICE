{"ast":null,"code":"/**\n * @license Complex.js v2.0.15 12/05/2020\n *\n * Copyright (c) 2020, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function (root) {\n  'use strict';\n\n  var cosh = function (x) {\n    return (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n  var sinh = function (x) {\n    return (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  /**\n   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n   *\n   * @param {number} x\n   * @returns {number} cos(x) - 1\n   */\n  var cosm1 = function (x) {\n    var b = Math.PI / 4;\n    if (-b > x || x > b) {\n      return Math.cos(x) - 1.0;\n    }\n\n    /* Calculate horner form of polynomial of taylor series in Q\n    var fac = 1, alt = 1, pol = {};\n    for (var i = 0; i <= 16; i++) {\n      fac*= i || 1;\n      if (i % 2 == 0) {\n        pol[i] = new Fraction(1, alt * fac);\n        alt = -alt;\n      }\n    }\n    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n    */\n\n    var xx = x * x;\n    return xx * (xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2);\n  };\n  var hypot = function (x, y) {\n    var a = Math.abs(x);\n    var b = Math.abs(y);\n    if (a < 3000 && b < 3000) {\n      return Math.sqrt(a * a + b * b);\n    }\n    if (a < b) {\n      a = b;\n      b = x / y;\n    } else {\n      b = y / x;\n    }\n    return a * Math.sqrt(1 + b * b);\n  };\n  var parser_exit = function () {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n    if (a === 0) {\n      return Math.log(_b);\n    }\n    if (b === 0) {\n      return Math.log(_a);\n    }\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n      Math.log(a * a + b * b) / 2\n      *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n      var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n      return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n      * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n      Math.log(a / Math.cos(Math.atan2(b, a)))\n      * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n      Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n      */\n\n    return Math.log(a / Math.cos(Math.atan2(b, a)));\n  }\n  var parse = function (a, b) {\n    var z = {\n      're': 0,\n      'im': 0\n    };\n    if (a === undefined || a === null) {\n      z['re'] = z['im'] = 0;\n    } else if (b !== undefined) {\n      z['re'] = a;\n      z['im'] = b;\n    } else switch (typeof a) {\n      case 'object':\n        if ('im' in a && 're' in a) {\n          z['re'] = a['re'];\n          z['im'] = a['im'];\n        } else if ('abs' in a && 'arg' in a) {\n          if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\n            return Complex['INFINITY'];\n          }\n          z['re'] = a['abs'] * Math.cos(a['arg']);\n          z['im'] = a['abs'] * Math.sin(a['arg']);\n        } else if ('r' in a && 'phi' in a) {\n          if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\n            return Complex['INFINITY'];\n          }\n          z['re'] = a['r'] * Math.cos(a['phi']);\n          z['im'] = a['r'] * Math.sin(a['phi']);\n        } else if (a.length === 2) {\n          // Quick array check\n          z['re'] = a[0];\n          z['im'] = a[1];\n        } else {\n          parser_exit();\n        }\n        break;\n      case 'string':\n        z['im'] = /* void */\n        z['re'] = 0;\n        var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n        var plus = 1;\n        var minus = 0;\n        if (tokens === null) {\n          parser_exit();\n        }\n        for (var i = 0; i < tokens.length; i++) {\n          var c = tokens[i];\n          if (c === ' ' || c === '\\t' || c === '\\n') {\n            /* void */\n          } else if (c === '+') {\n            plus++;\n          } else if (c === '-') {\n            minus++;\n          } else if (c === 'i' || c === 'I') {\n            if (plus + minus === 0) {\n              parser_exit();\n            }\n            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n              i++;\n            } else {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n            }\n            plus = minus = 0;\n          } else {\n            if (plus + minus === 0 || isNaN(c)) {\n              parser_exit();\n            }\n            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n              i++;\n            } else {\n              z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n            }\n            plus = minus = 0;\n          }\n        }\n\n        // Still something on the stack\n        if (plus + minus > 0) {\n          parser_exit();\n        }\n        break;\n      case 'number':\n        z['im'] = 0;\n        z['re'] = a;\n        break;\n      default:\n        parser_exit();\n    }\n    if (isNaN(z['re']) || isNaN(z['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n    return z;\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n    var z = parse(a, b);\n    this['re'] = z['re'];\n    this['im'] = z['im'];\n  }\n  Complex.prototype = {\n    're': 0,\n    'im': 0,\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function () {\n      var abs = this['abs']();\n      return new Complex(this['re'] / abs, this['im'] / abs);\n    },\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function (a, b) {\n      var z = new Complex(a, b);\n\n      // Infinity + Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity + z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n      return new Complex(this['re'] + z['re'], this['im'] + z['im']);\n    },\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function (a, b) {\n      var z = new Complex(a, b);\n\n      // Infinity - Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity - z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n      return new Complex(this['re'] - z['re'], this['im'] - z['im']);\n    },\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function (a, b) {\n      var z = new Complex(a, b);\n\n      // Infinity * 0 = NaN\n      if (this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity * z = Infinity { where z != 0 }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      // Short circuit for real values\n      if (z['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * z['re'], 0);\n      }\n      return new Complex(this['re'] * z['re'] - this['im'] * z['im'], this['re'] * z['im'] + this['im'] * z['re']);\n    },\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function (a, b) {\n      var z = new Complex(a, b);\n\n      // 0 / 0 = NaN and Infinity / Infinity = NaN\n      if (this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity / 0 = Infinity\n      if (this['isInfinite']() || z['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      // 0 / Infinity = 0\n      if (this['isZero']() || z['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n      a = this['re'];\n      b = this['im'];\n      var c = z['re'];\n      var d = z['im'];\n      var t, x;\n      if (0 === d) {\n        // Divisor is real\n        return new Complex(a / c, b / c);\n      }\n      if (Math.abs(c) < Math.abs(d)) {\n        x = c / d;\n        t = c * x + d;\n        return new Complex((a * x + b) / t, (b * x - a) / t);\n      } else {\n        x = d / c;\n        t = d * x + c;\n        return new Complex((a + b * x) / t, (b - a * x) / t);\n      }\n    },\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function (a, b) {\n      var z = new Complex(a, b);\n      a = this['re'];\n      b = this['im'];\n      if (z['isZero']()) {\n        return Complex['ONE'];\n      }\n\n      // If the exponent is real\n      if (z['im'] === 0) {\n        if (b === 0 && a > 0) {\n          return new Complex(Math.pow(a, z['re']), 0);\n        } else if (a === 0) {\n          // If base is fully imaginary\n\n          switch ((z['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, z['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, z['re']));\n            case 2:\n              return new Complex(-Math.pow(b, z['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, z['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\n        return Complex['ZERO'];\n      }\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\n      b = z['im'] * loh + z['re'] * arg;\n      return new Complex(a * Math.cos(b), a * Math.sin(b));\n    },\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function () {\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n      var re, im;\n      if (a >= 0) {\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n      return new Complex(re, b < 0 ? -im : im);\n    },\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function () {\n      var tmp = Math.exp(this['re']);\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));\n    },\n    /**\n     * Calculate the complex exponent and subtracts one.\n     *\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\n     * `x` is small.\n     *\n     * @returns {Complex}\n     */\n    'expm1': function () {\n      /**\n       * exp(a + i*b) - 1\n       = exp(a) * (cos(b) + j*sin(b)) - 1\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n       */\n\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(Math.expm1(a) * Math.cos(b) + cosm1(b), Math.exp(a) * Math.sin(b));\n    },\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function () {\n      var a = this['re'];\n      var b = this['im'];\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n      return new Complex(logHypot(a, b), Math.atan2(b, a));\n    },\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function () {\n      return hypot(this['re'], this['im']);\n    },\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function () {\n      return Math.atan2(this['im'], this['re']);\n    },\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function () {\n      // sin(c) = (e^b - e^(-b)) / (2i)\n\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(Math.sin(a) * cosh(b), Math.cos(a) * sinh(b));\n    },\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function () {\n      // cos(z) = (e^b + e^(-b)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(Math.cos(a) * cosh(b), -Math.sin(a) * sinh(b));\n    },\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function () {\n      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n      return new Complex(Math.sin(a) / d, sinh(b) / d);\n    },\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function () {\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n      return new Complex(-Math.sin(a) / d, sinh(b) / d);\n    },\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function () {\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n      return new Complex(Math.cos(a) * cosh(b) / d, Math.sin(a) * sinh(b) / d);\n    },\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function () {\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n      return new Complex(Math.sin(a) * cosh(b) / d, -Math.cos(a) * sinh(b) / d);\n    },\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function () {\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();\n      var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();\n      return new Complex(t2['im'], -t2['re']);\n    },\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function () {\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();\n      var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function () {\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n      if (a === 0) {\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n      var d = a * a + (1.0 - b) * (1.0 - b);\n      var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function () {\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();\n    },\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function () {\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();\n    },\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function () {\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();\n    },\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function () {\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(sinh(a) * Math.cos(b), cosh(a) * Math.sin(b));\n    },\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function () {\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n      return new Complex(cosh(a) * Math.cos(b), sinh(a) * Math.sin(b));\n    },\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function () {\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n      return new Complex(sinh(a) / d, Math.sin(b) / d);\n    },\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function () {\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n      return new Complex(sinh(a) / d, -Math.sin(b) / d);\n    },\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function () {\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n      return new Complex(-2 * sinh(a) * Math.cos(b) / d, 2 * cosh(a) * Math.sin(b) / d);\n    },\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function () {\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n      return new Complex(2 * cosh(a) * Math.cos(b) / d, -2 * sinh(a) * Math.sin(b) / d);\n    },\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function () {\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n    /**\n     * Calculate the complex acosh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function () {\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        var tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        var tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function () {\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n      var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function () {\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n      if (a === 0 && b === 0) {\n        return new Complex(0, Math.PI / 2);\n      }\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();\n    },\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function () {\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n      if (b === 0) {\n        return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);\n      }\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();\n    },\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function () {\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n      var d = a * a + b * b;\n      return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();\n    },\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function () {\n      // 1 / 0 = Infinity and 1 / Infinity = 0\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n      if (this['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n      var a = this['re'];\n      var b = this['im'];\n      var d = a * a + b * b;\n      return new Complex(a / d, -b / d);\n    },\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function () {\n      return new Complex(this['re'], -this['im']);\n    },\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function () {\n      return new Complex(-this['re'], -this['im']);\n    },\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function (places) {\n      places = Math.pow(10, places || 0);\n      return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);\n    },\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function (places) {\n      places = Math.pow(10, places || 0);\n      return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);\n    },\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function (places) {\n      places = Math.pow(10, places || 0);\n      return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);\n    },\n    /**\n     * Compares two complex numbers\n     *\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\n     *\n     * @returns {boolean}\n     */\n    'equals': function (a, b) {\n      var z = new Complex(a, b);\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n    },\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function () {\n      return new Complex(this['re'], this['im']);\n    },\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function () {\n      var a = this['re'];\n      var b = this['im'];\n      var ret = \"\";\n      if (this['isNaN']()) {\n        return 'NaN';\n      }\n      if (this['isInfinite']()) {\n        return 'Infinity';\n      }\n      if (Math.abs(a) < Complex['EPSILON']) {\n        a = 0;\n      }\n      if (Math.abs(b) < Complex['EPSILON']) {\n        b = 0;\n      }\n\n      // If is real number\n      if (b === 0) {\n        return ret + a;\n      }\n      if (a !== 0) {\n        ret += a;\n        ret += \" \";\n        if (b < 0) {\n          b = -b;\n          ret += \"-\";\n        } else {\n          ret += \"+\";\n        }\n        ret += \" \";\n      } else if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      }\n      if (1 !== b) {\n        // b is the absolute imaginary part\n        ret += b;\n      }\n      return ret + \"i\";\n    },\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function () {\n      return [this['re'], this['im']];\n    },\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function () {\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n    /**\n     * Determines whether a complex number is not on the Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function () {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n    /**\n     * Determines whether or not a complex number is at the zero pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isZero': function () {\n      return this['im'] === 0 && this['re'] === 0;\n    },\n    /**\n     * Determines whether a complex number is not at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function () {\n      return isFinite(this['re']) && isFinite(this['im']);\n    },\n    /**\n     * Determines whether or not a complex number is at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isInfinite': function () {\n      return !(this['isNaN']() || this['isFinite']());\n    }\n  };\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\n  Complex['NAN'] = new Complex(NaN, NaN);\n  Complex['EPSILON'] = 1e-15;\n  if (typeof define === 'function' && define['amd']) {\n    define([], function () {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Complex, \"__esModule\", {\n      'value': true\n    });\n    Complex['default'] = Complex;\n    Complex['Complex'] = Complex;\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n})(this);","map":{"version":3,"names":["root","cosh","x","Math","exp","sinh","cosm1","b","PI","cos","xx","hypot","y","a","abs","sqrt","parser_exit","SyntaxError","logHypot","_a","_b","log","atan2","parse","z","undefined","Number","isFinite","Complex","sin","length","tokens","match","plus","minus","i","c","isNaN","parseFloat","prototype","sign","add","sub","mul","div","d","t","pow","arg","loh","r","re","im","tmp","expm1","tan","cot","sec","csc","asin","t1","t2","acos","atan","Infinity","acot","asec","acsc","tanh","coth","csch","sech","asinh","res","acosh","atanh","noIM","oneMinus","onePlus","temp","acoth","acsch","asech","inverse","conjugate","neg","ceil","places","floor","round","equals","clone","toString","ret","toVector","valueOf","isZero","isInfinite","E","NaN","define","exports","Object","defineProperty","module"],"sources":["C:/Users/DELL/Downloads/react-calculator-master/node_modules/complex.js/complex.js"],"sourcesContent":["/**\n * @license Complex.js v2.0.15 12/05/2020\n *\n * Copyright (c) 2020, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function(root) {\n\n  'use strict';\n\n  var cosh = function(x) {\n    return (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var sinh = function(x) {\n    return (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  /**\n   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n   *\n   * @param {number} x\n   * @returns {number} cos(x) - 1\n   */\n  var cosm1 = function(x) {\n\n    var b = Math.PI / 4;\n    if (-b > x || x > b) {\n      return Math.cos(x) - 1.0;\n    }\n\n    /* Calculate horner form of polynomial of taylor series in Q\n    var fac = 1, alt = 1, pol = {};\n    for (var i = 0; i <= 16; i++) {\n      fac*= i || 1;\n      if (i % 2 == 0) {\n        pol[i] = new Fraction(1, alt * fac);\n        alt = -alt;\n      }\n    }\n    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n    */\n\n    var xx = x * x;\n    return xx * (\n      xx * (\n        xx * (\n          xx * (\n            xx * (\n              xx * (\n                xx * (\n                  xx / 20922789888000\n                  - 1 / 87178291200)\n                + 1 / 479001600)\n              - 1 / 3628800)\n            + 1 / 40320)\n          - 1 / 720)\n        + 1 / 24)\n      - 1 / 2);\n  };\n\n  var hypot = function(x, y) {\n\n    var a = Math.abs(x);\n    var b = Math.abs(y);\n\n    if (a < 3000 && b < 3000) {\n      return Math.sqrt(a * a + b * b);\n    }\n\n    if (a < b) {\n      a = b;\n      b = x / y;\n    } else {\n      b = y / x;\n    }\n    return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function() {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n     Math.log(a * a + b * b) / 2\n\n     *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n     var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n\n     return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n     */\n\n    return Math.log(a / Math.cos(Math.atan2(b, a)));\n  }\n\n  var parse = function(a, b) {\n\n    var z = { 're': 0, 'im': 0 };\n\n    if (a === undefined || a === null) {\n      z['re'] =\n      z['im'] = 0;\n    } else if (b !== undefined) {\n      z['re'] = a;\n      z['im'] = b;\n    } else\n      switch (typeof a) {\n\n        case 'object':\n\n          if ('im' in a && 're' in a) {\n            z['re'] = a['re'];\n            z['im'] = a['im'];\n          } else if ('abs' in a && 'arg' in a) {\n            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['abs'] * Math.cos(a['arg']);\n            z['im'] = a['abs'] * Math.sin(a['arg']);\n          } else if ('r' in a && 'phi' in a) {\n            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['r'] * Math.cos(a['phi']);\n            z['im'] = a['r'] * Math.sin(a['phi']);\n          } else if (a.length === 2) { // Quick array check\n            z['re'] = a[0];\n            z['im'] = a[1];\n          } else {\n            parser_exit();\n          }\n          break;\n\n        case 'string':\n\n          z['im'] = /* void */\n          z['re'] = 0;\n\n          var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n          var plus = 1;\n          var minus = 0;\n\n          if (tokens === null) {\n            parser_exit();\n          }\n\n          for (var i = 0; i < tokens.length; i++) {\n\n            var c = tokens[i];\n\n            if (c === ' ' || c === '\\t' || c === '\\n') {\n              /* void */\n            } else if (c === '+') {\n              plus++;\n            } else if (c === '-') {\n              minus++;\n            } else if (c === 'i' || c === 'I') {\n\n              if (plus + minus === 0) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n                i++;\n              } else {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n              }\n              plus = minus = 0;\n\n            } else {\n\n              if (plus + minus === 0 || isNaN(c)) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n                i++;\n              } else {\n                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n              }\n              plus = minus = 0;\n            }\n          }\n\n          // Still something on the stack\n          if (plus + minus > 0) {\n            parser_exit();\n          }\n          break;\n\n        case 'number':\n          z['im'] = 0;\n          z['re'] = a;\n          break;\n\n        default:\n          parser_exit();\n      }\n\n    if (isNaN(z['re']) || isNaN(z['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n\n    return z;\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    var z = parse(a, b);\n\n    this['re'] = z['re'];\n    this['im'] = z['im'];\n  }\n\n  Complex.prototype = {\n\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function() {\n\n      var abs = this['abs']();\n\n      return new Complex(\n        this['re'] / abs,\n        this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity + Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity + z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] + z['re'],\n        this['im'] + z['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity - Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity - z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] - z['re'],\n        this['im'] - z['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity * 0 = NaN\n      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity * z = Infinity { where z != 0 }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      // Short circuit for real values\n      if (z['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * z['re'], 0);\n      }\n\n      return new Complex(\n        this['re'] * z['re'] - this['im'] * z['im'],\n        this['re'] * z['im'] + this['im'] * z['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // 0 / 0 = NaN and Infinity / Infinity = NaN\n      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity / 0 = Infinity\n      if (this['isInfinite']() || z['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      // 0 / Infinity = 0\n      if (this['isZero']() || z['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      a = this['re'];\n      b = this['im'];\n\n      var c = z['re'];\n      var d = z['im'];\n      var t, x;\n\n      if (0 === d) {\n        // Divisor is real\n        return new Complex(a / c, b / c);\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n\n        x = c / d;\n        t = c * x + d;\n\n        return new Complex(\n          (a * x + b) / t,\n          (b * x - a) / t);\n\n      } else {\n\n        x = d / c;\n        t = d * x + c;\n\n        return new Complex(\n          (a + b * x) / t,\n          (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      a = this['re'];\n      b = this['im'];\n\n      if (z['isZero']()) {\n        return Complex['ONE'];\n      }\n\n      // If the exponent is real\n      if (z['im'] === 0) {\n\n        if (b === 0 && a > 0) {\n\n          return new Complex(Math.pow(a, z['re']), 0);\n\n        } else if (a === 0) { // If base is fully imaginary\n\n          switch ((z['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, z['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, z['re']));\n            case 2:\n              return new Complex(-Math.pow(b, z['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, z['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\n        return Complex['ZERO'];\n      }\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\n      b = z['im'] * loh + z['re'] * arg;\n      return new Complex(\n        a * Math.cos(b),\n        a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n\n      var re, im;\n\n      if (a >= 0) {\n\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function() {\n\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(\n        tmp * Math.cos(this['im']),\n        tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the complex exponent and subtracts one.\n     *\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\n     * `x` is small.\n     *\n     * @returns {Complex}\n     */\n    'expm1': function() {\n\n      /**\n       * exp(a + i*b) - 1\n       = exp(a) * (cos(b) + j*sin(b)) - 1\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n       */\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.expm1(a) * Math.cos(b) + cosm1(b),\n        Math.exp(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(\n        logHypot(a, b),\n        Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function() {\n\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function() {\n\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function() {\n\n      // sin(c) = (e^b - e^(-b)) / (2i)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.sin(a) * cosh(b),\n        Math.cos(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function() {\n\n      // cos(z) = (e^b + e^(-b)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.cos(a) * cosh(b),\n        -Math.sin(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function() {\n\n      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n\n      return new Complex(\n        Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function() {\n\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n\n      return new Complex(\n        -Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function() {\n\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.cos(a) * cosh(b) / d,\n        Math.sin(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function() {\n\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.sin(a) * cosh(b) / d,\n        -Math.cos(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function() {\n\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function() {\n\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function() {\n\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n\n      var t1 = new Complex(\n        (1 - b * b - a * a) / d,\n        -2 * a / d).log();\n\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function() {\n\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atan()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function() {\n\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acos()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function() {\n\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asin()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function() {\n\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        sinh(a) * Math.cos(b),\n        cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function() {\n\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        cosh(a) * Math.cos(b),\n        sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function() {\n\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function() {\n\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function() {\n\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n\n      return new Complex(\n        -2 * sinh(a) * Math.cos(b) / d,\n        2 * cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function() {\n\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n\n      return new Complex(\n        2 * cosh(a) * Math.cos(b) / d,\n        -2 * sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function() {\n\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex acosh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function() {\n\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        var tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        var tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function() {\n\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n\n      var x = (d !== 0)\n        ? new Complex(\n          (onePlus * oneMinus - b * b) / d,\n          (b * oneMinus + onePlus * b) / d)\n        : new Complex(\n          (a !== -1) ? (a / 0) : 0,\n          (b !== 0) ? (b / 0) : 0);\n\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function() {\n\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atanh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function() {\n\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n\n        return new Complex(\n          (a !== 0)\n            ? Math.log(a + Math.sqrt(a * a + 1))\n            : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asinh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function() {\n\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acosh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function() {\n\n      // 1 / 0 = Infinity and 1 / Infinity = 0\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      if (this['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = a * a + b * b;\n\n      return new Complex(a / d, -b / d);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function() {\n\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function() {\n\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.ceil(this['re'] * places) / places,\n        Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.floor(this['re'] * places) / places,\n        Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.round(this['re'] * places) / places,\n        Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\n     *\n     * @returns {boolean}\n     */\n    'equals': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\n        Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function() {\n\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var ret = \"\";\n\n      if (this['isNaN']()) {\n        return 'NaN';\n      }\n\n      if (this['isInfinite']()) {\n        return 'Infinity';\n      }\n\n      if (Math.abs(a) < Complex['EPSILON']) {\n        a = 0;\n      }\n\n      if (Math.abs(b) < Complex['EPSILON']) {\n        b = 0;\n      }\n\n      // If is real number\n      if (b === 0) {\n        return ret + a;\n      }\n\n      if (a !== 0) {\n        ret += a;\n        ret += \" \";\n        if (b < 0) {\n          b = -b;\n          ret += \"-\";\n        } else {\n          ret += \"+\";\n        }\n        ret += \" \";\n      } else if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      }\n\n      if (1 !== b) { // b is the absolute imaginary part\n        ret += b;\n      }\n      return ret + \"i\";\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function() {\n\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n\n    /**\n     * Determines whether a complex number is not on the Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the zero pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isZero': function() {\n      return this['im'] === 0 && this['re'] === 0;\n    },\n\n    /**\n     * Determines whether a complex number is not at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n      return isFinite(this['re']) && isFinite(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isInfinite': function() {\n      return !(this['isNaN']() || this['isFinite']());\n    }\n  };\n\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\n  Complex['NAN'] = new Complex(NaN, NaN);\n  Complex['EPSILON'] = 1e-15;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Complex, \"__esModule\", { 'value': true });\n    Complex['default'] = Complex;\n    Complex['Complex'] = Complex;\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n\n})(this);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,UAASA,IAAI,EAAE;EAEd,YAAY;;EAEZ,IAAIC,IAAI,GAAG,SAAAA,CAASC,CAAC,EAAE;IACrB,OAAO,CAACC,IAAI,CAACC,GAAG,CAACF,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACF,CAAC,CAAC,IAAI,GAAG;EAC3C,CAAC;EAED,IAAIG,IAAI,GAAG,SAAAA,CAASH,CAAC,EAAE;IACrB,OAAO,CAACC,IAAI,CAACC,GAAG,CAACF,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACF,CAAC,CAAC,IAAI,GAAG;EAC3C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,IAAII,KAAK,GAAG,SAAAA,CAASJ,CAAC,EAAE;IAEtB,IAAIK,CAAC,GAAGJ,IAAI,CAACK,EAAE,GAAG,CAAC;IACnB,IAAI,CAACD,CAAC,GAAGL,CAAC,IAAIA,CAAC,GAAGK,CAAC,EAAE;MACnB,OAAOJ,IAAI,CAACM,GAAG,CAACP,CAAC,CAAC,GAAG,GAAG;IAC1B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI,IAAIQ,EAAE,GAAGR,CAAC,GAAGA,CAAC;IACd,OAAOQ,EAAE,IACPA,EAAE,IACAA,EAAE,IACAA,EAAE,IACAA,EAAE,IACAA,EAAE,IACAA,EAAE,IACAA,EAAE,GAAG,cAAc,GACjB,CAAC,GAAG,WAAW,CAAC,GAClB,CAAC,GAAG,SAAS,CAAC,GAChB,CAAC,GAAG,OAAO,CAAC,GACd,CAAC,GAAG,KAAK,CAAC,GACZ,CAAC,GAAG,GAAG,CAAC,GACV,CAAC,GAAG,EAAE,CAAC,GACT,CAAC,GAAG,CAAC,CAAC;EACZ,CAAC;EAED,IAAIC,KAAK,GAAG,SAAAA,CAAST,CAAC,EAAEU,CAAC,EAAE;IAEzB,IAAIC,CAAC,GAAGV,IAAI,CAACW,GAAG,CAACZ,CAAC,CAAC;IACnB,IAAIK,CAAC,GAAGJ,IAAI,CAACW,GAAG,CAACF,CAAC,CAAC;IAEnB,IAAIC,CAAC,GAAG,IAAI,IAAIN,CAAC,GAAG,IAAI,EAAE;MACxB,OAAOJ,IAAI,CAACY,IAAI,CAACF,CAAC,GAAGA,CAAC,GAAGN,CAAC,GAAGA,CAAC,CAAC;IACjC;IAEA,IAAIM,CAAC,GAAGN,CAAC,EAAE;MACTM,CAAC,GAAGN,CAAC;MACLA,CAAC,GAAGL,CAAC,GAAGU,CAAC;IACX,CAAC,MAAM;MACLL,CAAC,GAAGK,CAAC,GAAGV,CAAC;IACX;IACA,OAAOW,CAAC,GAAGV,IAAI,CAACY,IAAI,CAAC,CAAC,GAAGR,CAAC,GAAGA,CAAC,CAAC;EACjC,CAAC;EAED,IAAIS,WAAW,GAAG,SAAAA,CAAA,EAAW;IAC3B,MAAMC,WAAW,CAAC,eAAe,CAAC;EACpC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,QAAQA,CAACL,CAAC,EAAEN,CAAC,EAAE;IAEtB,IAAIY,EAAE,GAAGhB,IAAI,CAACW,GAAG,CAACD,CAAC,CAAC;IACpB,IAAIO,EAAE,GAAGjB,IAAI,CAACW,GAAG,CAACP,CAAC,CAAC;IAEpB,IAAIM,CAAC,KAAK,CAAC,EAAE;MACX,OAAOV,IAAI,CAACkB,GAAG,CAACD,EAAE,CAAC;IACrB;IAEA,IAAIb,CAAC,KAAK,CAAC,EAAE;MACX,OAAOJ,IAAI,CAACkB,GAAG,CAACF,EAAE,CAAC;IACrB;IAEA,IAAIA,EAAE,GAAG,IAAI,IAAIC,EAAE,GAAG,IAAI,EAAE;MAC1B,OAAOjB,IAAI,CAACkB,GAAG,CAACR,CAAC,GAAGA,CAAC,GAAGN,CAAC,GAAGA,CAAC,CAAC,GAAG,GAAG;IACtC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAWI,OAAOJ,IAAI,CAACkB,GAAG,CAACR,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACN,IAAI,CAACmB,KAAK,CAACf,CAAC,EAAEM,CAAC,CAAC,CAAC,CAAC;EACjD;EAEA,IAAIU,KAAK,GAAG,SAAAA,CAASV,CAAC,EAAEN,CAAC,EAAE;IAEzB,IAAIiB,CAAC,GAAG;MAAE,IAAI,EAAE,CAAC;MAAE,IAAI,EAAE;IAAE,CAAC;IAE5B,IAAIX,CAAC,KAAKY,SAAS,IAAIZ,CAAC,KAAK,IAAI,EAAE;MACjCW,CAAC,CAAC,IAAI,CAAC,GACPA,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACb,CAAC,MAAM,IAAIjB,CAAC,KAAKkB,SAAS,EAAE;MAC1BD,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC;MACXW,CAAC,CAAC,IAAI,CAAC,GAAGjB,CAAC;IACb,CAAC,MACC,QAAQ,OAAOM,CAAC;MAEd,KAAK,QAAQ;QAEX,IAAI,IAAI,IAAIA,CAAC,IAAI,IAAI,IAAIA,CAAC,EAAE;UAC1BW,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,CAAC,IAAI,CAAC;UACjBW,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,CAAC,IAAI,CAAC;QACnB,CAAC,MAAM,IAAI,KAAK,IAAIA,CAAC,IAAI,KAAK,IAAIA,CAAC,EAAE;UACnC,IAAI,CAACa,MAAM,CAACC,QAAQ,CAACd,CAAC,CAAC,KAAK,CAAC,CAAC,IAAIa,MAAM,CAACC,QAAQ,CAACd,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;YAC3D,OAAOe,OAAO,CAAC,UAAU,CAAC;UAC5B;UACAJ,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,CAAC,KAAK,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACI,CAAC,CAAC,KAAK,CAAC,CAAC;UACvCW,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,CAAC,KAAK,CAAC,GAAGV,IAAI,CAAC0B,GAAG,CAAChB,CAAC,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC,MAAM,IAAI,GAAG,IAAIA,CAAC,IAAI,KAAK,IAAIA,CAAC,EAAE;UACjC,IAAI,CAACa,MAAM,CAACC,QAAQ,CAACd,CAAC,CAAC,GAAG,CAAC,CAAC,IAAIa,MAAM,CAACC,QAAQ,CAACd,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;YACzD,OAAOe,OAAO,CAAC,UAAU,CAAC;UAC5B;UACAJ,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,CAAC,GAAG,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACI,CAAC,CAAC,KAAK,CAAC,CAAC;UACrCW,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,CAAC,GAAG,CAAC,GAAGV,IAAI,CAAC0B,GAAG,CAAChB,CAAC,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC,MAAM,IAAIA,CAAC,CAACiB,MAAM,KAAK,CAAC,EAAE;UAAE;UAC3BN,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,CAAC,CAAC,CAAC;UACdW,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,MAAM;UACLG,WAAW,CAAC,CAAC;QACf;QACA;MAEF,KAAK,QAAQ;QAEXQ,CAAC,CAAC,IAAI,CAAC,GAAG;QACVA,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QAEX,IAAIO,MAAM,GAAGlB,CAAC,CAACmB,KAAK,CAAC,uCAAuC,CAAC;QAC7D,IAAIC,IAAI,GAAG,CAAC;QACZ,IAAIC,KAAK,GAAG,CAAC;QAEb,IAAIH,MAAM,KAAK,IAAI,EAAE;UACnBf,WAAW,CAAC,CAAC;QACf;QAEA,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACD,MAAM,EAAEK,CAAC,EAAE,EAAE;UAEtC,IAAIC,CAAC,GAAGL,MAAM,CAACI,CAAC,CAAC;UAEjB,IAAIC,CAAC,KAAK,GAAG,IAAIA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAK,IAAI,EAAE;YACzC;UAAA,CACD,MAAM,IAAIA,CAAC,KAAK,GAAG,EAAE;YACpBH,IAAI,EAAE;UACR,CAAC,MAAM,IAAIG,CAAC,KAAK,GAAG,EAAE;YACpBF,KAAK,EAAE;UACT,CAAC,MAAM,IAAIE,CAAC,KAAK,GAAG,IAAIA,CAAC,KAAK,GAAG,EAAE;YAEjC,IAAIH,IAAI,GAAGC,KAAK,KAAK,CAAC,EAAE;cACtBlB,WAAW,CAAC,CAAC;YACf;YAEA,IAAIe,MAAM,CAACI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,CAACE,KAAK,CAACN,MAAM,CAACI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;cAClDX,CAAC,CAAC,IAAI,CAAC,IAAIc,UAAU,CAAC,CAACJ,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIH,MAAM,CAACI,CAAC,GAAG,CAAC,CAAC,CAAC;cAC7DA,CAAC,EAAE;YACL,CAAC,MAAM;cACLX,CAAC,CAAC,IAAI,CAAC,IAAIc,UAAU,CAAC,CAACJ,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,IAAI,GAAG,CAAC;YACrD;YACAD,IAAI,GAAGC,KAAK,GAAG,CAAC;UAElB,CAAC,MAAM;YAEL,IAAID,IAAI,GAAGC,KAAK,KAAK,CAAC,IAAIG,KAAK,CAACD,CAAC,CAAC,EAAE;cAClCpB,WAAW,CAAC,CAAC;YACf;YAEA,IAAIe,MAAM,CAACI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIJ,MAAM,CAACI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;cAClDX,CAAC,CAAC,IAAI,CAAC,IAAIc,UAAU,CAAC,CAACJ,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIE,CAAC,CAAC;cACjDD,CAAC,EAAE;YACL,CAAC,MAAM;cACLX,CAAC,CAAC,IAAI,CAAC,IAAIc,UAAU,CAAC,CAACJ,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIE,CAAC,CAAC;YACnD;YACAH,IAAI,GAAGC,KAAK,GAAG,CAAC;UAClB;QACF;;QAEA;QACA,IAAID,IAAI,GAAGC,KAAK,GAAG,CAAC,EAAE;UACpBlB,WAAW,CAAC,CAAC;QACf;QACA;MAEF,KAAK,QAAQ;QACXQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QACXA,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC;QACX;MAEF;QACEG,WAAW,CAAC,CAAC;IACjB;IAEF,IAAIqB,KAAK,CAACb,CAAC,CAAC,IAAI,CAAC,CAAC,IAAIa,KAAK,CAACb,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;MACpC;MACA;IAAA;IAGF,OAAOA,CAAC;EACV,CAAC;;EAED;AACF;AACA;AACA;EACE,SAASI,OAAOA,CAACf,CAAC,EAAEN,CAAC,EAAE;IAErB,IAAI,EAAE,IAAI,YAAYqB,OAAO,CAAC,EAAE;MAC9B,OAAO,IAAIA,OAAO,CAACf,CAAC,EAAEN,CAAC,CAAC;IAC1B;IAEA,IAAIiB,CAAC,GAAGD,KAAK,CAACV,CAAC,EAAEN,CAAC,CAAC;IAEnB,IAAI,CAAC,IAAI,CAAC,GAAGiB,CAAC,CAAC,IAAI,CAAC;IACpB,IAAI,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC,IAAI,CAAC;EACtB;EAEAI,OAAO,CAACW,SAAS,GAAG;IAElB,IAAI,EAAE,CAAC;IACP,IAAI,EAAE,CAAC;IAEP;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAC,CAAA,EAAW;MAEjB,IAAI1B,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;MAEvB,OAAO,IAAIc,OAAO,CAChB,IAAI,CAAC,IAAI,CAAC,GAAGd,GAAG,EAChB,IAAI,CAAC,IAAI,CAAC,GAAGA,GAAG,CAAC;IACrB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAA2B,CAAS5B,CAAC,EAAEN,CAAC,EAAE;MAEpB,IAAIiB,CAAC,GAAG,IAAII,OAAO,CAACf,CAAC,EAAEN,CAAC,CAAC;;MAEzB;MACA,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAIiB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;QAC7C,OAAOI,OAAO,CAAC,KAAK,CAAC;MACvB;;MAEA;MACA,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAIJ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;QAC7C,OAAOI,OAAO,CAAC,UAAU,CAAC;MAC5B;MAEA,OAAO,IAAIA,OAAO,CAChB,IAAI,CAAC,IAAI,CAAC,GAAGJ,CAAC,CAAC,IAAI,CAAC,EACpB,IAAI,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAkB,CAAS7B,CAAC,EAAEN,CAAC,EAAE;MAEpB,IAAIiB,CAAC,GAAG,IAAII,OAAO,CAACf,CAAC,EAAEN,CAAC,CAAC;;MAEzB;MACA,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAIiB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;QAC7C,OAAOI,OAAO,CAAC,KAAK,CAAC;MACvB;;MAEA;MACA,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAIJ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;QAC7C,OAAOI,OAAO,CAAC,UAAU,CAAC;MAC5B;MAEA,OAAO,IAAIA,OAAO,CAChB,IAAI,CAAC,IAAI,CAAC,GAAGJ,CAAC,CAAC,IAAI,CAAC,EACpB,IAAI,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAmB,CAAS9B,CAAC,EAAEN,CAAC,EAAE;MAEpB,IAAIiB,CAAC,GAAG,IAAII,OAAO,CAACf,CAAC,EAAEN,CAAC,CAAC;;MAEzB;MACA,IAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAIiB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAM,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAIA,CAAC,CAAC,YAAY,CAAC,CAAC,CAAE,EAAE;QACtF,OAAOI,OAAO,CAAC,KAAK,CAAC;MACvB;;MAEA;MACA,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAIJ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;QAC7C,OAAOI,OAAO,CAAC,UAAU,CAAC;MAC5B;;MAEA;MACA,IAAIJ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACrC,OAAO,IAAII,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAGJ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;MAC7C;MAEA,OAAO,IAAII,OAAO,CAChB,IAAI,CAAC,IAAI,CAAC,GAAGJ,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC,IAAI,CAAC,EAC3C,IAAI,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAoB,CAAS/B,CAAC,EAAEN,CAAC,EAAE;MAEpB,IAAIiB,CAAC,GAAG,IAAII,OAAO,CAACf,CAAC,EAAEN,CAAC,CAAC;;MAEzB;MACA,IAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAIiB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAM,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAIA,CAAC,CAAC,YAAY,CAAC,CAAC,CAAE,EAAE;QACtF,OAAOI,OAAO,CAAC,KAAK,CAAC;MACvB;;MAEA;MACA,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAIJ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QACzC,OAAOI,OAAO,CAAC,UAAU,CAAC;MAC5B;;MAEA;MACA,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAIJ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;QACzC,OAAOI,OAAO,CAAC,MAAM,CAAC;MACxB;MAEAf,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACdN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAEd,IAAI6B,CAAC,GAAGZ,CAAC,CAAC,IAAI,CAAC;MACf,IAAIqB,CAAC,GAAGrB,CAAC,CAAC,IAAI,CAAC;MACf,IAAIsB,CAAC,EAAE5C,CAAC;MAER,IAAI,CAAC,KAAK2C,CAAC,EAAE;QACX;QACA,OAAO,IAAIjB,OAAO,CAACf,CAAC,GAAGuB,CAAC,EAAE7B,CAAC,GAAG6B,CAAC,CAAC;MAClC;MAEA,IAAIjC,IAAI,CAACW,GAAG,CAACsB,CAAC,CAAC,GAAGjC,IAAI,CAACW,GAAG,CAAC+B,CAAC,CAAC,EAAE;QAE7B3C,CAAC,GAAGkC,CAAC,GAAGS,CAAC;QACTC,CAAC,GAAGV,CAAC,GAAGlC,CAAC,GAAG2C,CAAC;QAEb,OAAO,IAAIjB,OAAO,CAChB,CAACf,CAAC,GAAGX,CAAC,GAAGK,CAAC,IAAIuC,CAAC,EACf,CAACvC,CAAC,GAAGL,CAAC,GAAGW,CAAC,IAAIiC,CAAC,CAAC;MAEpB,CAAC,MAAM;QAEL5C,CAAC,GAAG2C,CAAC,GAAGT,CAAC;QACTU,CAAC,GAAGD,CAAC,GAAG3C,CAAC,GAAGkC,CAAC;QAEb,OAAO,IAAIR,OAAO,CAChB,CAACf,CAAC,GAAGN,CAAC,GAAGL,CAAC,IAAI4C,CAAC,EACf,CAACvC,CAAC,GAAGM,CAAC,GAAGX,CAAC,IAAI4C,CAAC,CAAC;MACpB;IACF,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAC,CAASlC,CAAC,EAAEN,CAAC,EAAE;MAEpB,IAAIiB,CAAC,GAAG,IAAII,OAAO,CAACf,CAAC,EAAEN,CAAC,CAAC;MAEzBM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACdN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAEd,IAAIiB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QACjB,OAAOI,OAAO,CAAC,KAAK,CAAC;MACvB;;MAEA;MACA,IAAIJ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAEjB,IAAIjB,CAAC,KAAK,CAAC,IAAIM,CAAC,GAAG,CAAC,EAAE;UAEpB,OAAO,IAAIe,OAAO,CAACzB,IAAI,CAAC4C,GAAG,CAAClC,CAAC,EAAEW,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;QAE7C,CAAC,MAAM,IAAIX,CAAC,KAAK,CAAC,EAAE;UAAE;;UAEpB,QAAQ,CAACW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;YAC3B,KAAK,CAAC;cACJ,OAAO,IAAII,OAAO,CAACzB,IAAI,CAAC4C,GAAG,CAACxC,CAAC,EAAEiB,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;YAC7C,KAAK,CAAC;cACJ,OAAO,IAAII,OAAO,CAAC,CAAC,EAAEzB,IAAI,CAAC4C,GAAG,CAACxC,CAAC,EAAEiB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7C,KAAK,CAAC;cACJ,OAAO,IAAII,OAAO,CAAC,CAACzB,IAAI,CAAC4C,GAAG,CAACxC,CAAC,EAAEiB,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;YAC9C,KAAK,CAAC;cACJ,OAAO,IAAII,OAAO,CAAC,CAAC,EAAE,CAACzB,IAAI,CAAC4C,GAAG,CAACxC,CAAC,EAAEiB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;UAChD;QACF;MACF;;MAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEM,IAAIX,CAAC,KAAK,CAAC,IAAIN,CAAC,KAAK,CAAC,IAAIiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAIA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QACrD,OAAOI,OAAO,CAAC,MAAM,CAAC;MACxB;MAEA,IAAIoB,GAAG,GAAG7C,IAAI,CAACmB,KAAK,CAACf,CAAC,EAAEM,CAAC,CAAC;MAC1B,IAAIoC,GAAG,GAAG/B,QAAQ,CAACL,CAAC,EAAEN,CAAC,CAAC;MAExBM,CAAC,GAAGV,IAAI,CAACC,GAAG,CAACoB,CAAC,CAAC,IAAI,CAAC,GAAGyB,GAAG,GAAGzB,CAAC,CAAC,IAAI,CAAC,GAAGwB,GAAG,CAAC;MAC3CzC,CAAC,GAAGiB,CAAC,CAAC,IAAI,CAAC,GAAGyB,GAAG,GAAGzB,CAAC,CAAC,IAAI,CAAC,GAAGwB,GAAG;MACjC,OAAO,IAAIpB,OAAO,CAChBf,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACF,CAAC,CAAC,EACfM,CAAC,GAAGV,IAAI,CAAC0B,GAAG,CAACtB,CAAC,CAAC,CAAC;IACpB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAQ,CAAA,EAAW;MAEjB,IAAIF,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAI2C,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;MAErB,IAAIC,EAAE,EAAEC,EAAE;MAEV,IAAIvC,CAAC,IAAI,CAAC,EAAE;QAEV,IAAIN,CAAC,KAAK,CAAC,EAAE;UACX,OAAO,IAAIqB,OAAO,CAACzB,IAAI,CAACY,IAAI,CAACF,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC;QAEAsC,EAAE,GAAG,GAAG,GAAGhD,IAAI,CAACY,IAAI,CAAC,GAAG,IAAImC,CAAC,GAAGrC,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM;QACLsC,EAAE,GAAGhD,IAAI,CAACW,GAAG,CAACP,CAAC,CAAC,GAAGJ,IAAI,CAACY,IAAI,CAAC,CAAC,IAAImC,CAAC,GAAGrC,CAAC,CAAC,CAAC;MAC3C;MAEA,IAAIA,CAAC,IAAI,CAAC,EAAE;QACVuC,EAAE,GAAG,GAAG,GAAGjD,IAAI,CAACY,IAAI,CAAC,GAAG,IAAImC,CAAC,GAAGrC,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM;QACLuC,EAAE,GAAGjD,IAAI,CAACW,GAAG,CAACP,CAAC,CAAC,GAAGJ,IAAI,CAACY,IAAI,CAAC,CAAC,IAAImC,CAAC,GAAGrC,CAAC,CAAC,CAAC;MAC3C;MAEA,OAAO,IAAIe,OAAO,CAACuB,EAAE,EAAE5C,CAAC,GAAG,CAAC,GAAG,CAAC6C,EAAE,GAAGA,EAAE,CAAC;IAC1C,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAhD,CAAA,EAAW;MAEhB,IAAIiD,GAAG,GAAGlD,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;MAE9B,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACpB;MAAA;MAEF,OAAO,IAAIwB,OAAO,CAChByB,GAAG,GAAGlD,IAAI,CAACM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAC1B4C,GAAG,GAAGlD,IAAI,CAAC0B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/B,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAAyB,CAAA,EAAW;MAElB;AACN;AACA;AACA;AACA;;MAEM,IAAIzC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,OAAO,IAAIqB,OAAO,CAChBzB,IAAI,CAACmD,KAAK,CAACzC,CAAC,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACF,CAAC,CAAC,GAAGD,KAAK,CAACC,CAAC,CAAC,EACtCJ,IAAI,CAACC,GAAG,CAACS,CAAC,CAAC,GAAGV,IAAI,CAAC0B,GAAG,CAACtB,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAc,CAAA,EAAW;MAEhB,IAAIR,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIA,CAAC,KAAK,CAAC,IAAIM,CAAC,GAAG,CAAC,EAAE;QACpB;MAAA;MAGF,OAAO,IAAIe,OAAO,CAChBV,QAAQ,CAACL,CAAC,EAAEN,CAAC,CAAC,EACdJ,IAAI,CAACmB,KAAK,CAACf,CAAC,EAAEM,CAAC,CAAC,CAAC;IACrB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAC,CAAA,EAAW;MAEhB,OAAOH,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAqC,CAAA,EAAW;MAEhB,OAAO7C,IAAI,CAACmB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAO,CAAA,EAAW;MAEhB;;MAEA,IAAIhB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,OAAO,IAAIqB,OAAO,CAChBzB,IAAI,CAAC0B,GAAG,CAAChB,CAAC,CAAC,GAAGZ,IAAI,CAACM,CAAC,CAAC,EACrBJ,IAAI,CAACM,GAAG,CAACI,CAAC,CAAC,GAAGR,IAAI,CAACE,CAAC,CAAC,CAAC;IAC1B,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAE,CAAA,EAAW;MAEhB;;MAEA,IAAII,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,OAAO,IAAIqB,OAAO,CAChBzB,IAAI,CAACM,GAAG,CAACI,CAAC,CAAC,GAAGZ,IAAI,CAACM,CAAC,CAAC,EACrB,CAACJ,IAAI,CAAC0B,GAAG,CAAChB,CAAC,CAAC,GAAGR,IAAI,CAACE,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAgD,CAAA,EAAW;MAEhB;;MAEA,IAAI1C,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACtB,IAAIN,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACtB,IAAIsC,CAAC,GAAG1C,IAAI,CAACM,GAAG,CAACI,CAAC,CAAC,GAAGZ,IAAI,CAACM,CAAC,CAAC;MAE7B,OAAO,IAAIqB,OAAO,CAChBzB,IAAI,CAAC0B,GAAG,CAAChB,CAAC,CAAC,GAAGgC,CAAC,EACfxC,IAAI,CAACE,CAAC,CAAC,GAAGsC,CAAC,CAAC;IAChB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAW,CAAA,EAAW;MAEhB;;MAEA,IAAI3C,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACtB,IAAIN,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACtB,IAAIsC,CAAC,GAAG1C,IAAI,CAACM,GAAG,CAACI,CAAC,CAAC,GAAGZ,IAAI,CAACM,CAAC,CAAC;MAE7B,OAAO,IAAIqB,OAAO,CAChB,CAACzB,IAAI,CAAC0B,GAAG,CAAChB,CAAC,CAAC,GAAGgC,CAAC,EAChBxC,IAAI,CAACE,CAAC,CAAC,GAAGsC,CAAC,CAAC;IAChB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAY,CAAA,EAAW;MAEhB;;MAEA,IAAI5C,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIsC,CAAC,GAAG,GAAG,GAAG5C,IAAI,CAAC,CAAC,GAAGM,CAAC,CAAC,GAAG,GAAG,GAAGJ,IAAI,CAACM,GAAG,CAAC,CAAC,GAAGI,CAAC,CAAC;MAEjD,OAAO,IAAIe,OAAO,CAChBzB,IAAI,CAACM,GAAG,CAACI,CAAC,CAAC,GAAGZ,IAAI,CAACM,CAAC,CAAC,GAAGsC,CAAC,EACzB1C,IAAI,CAAC0B,GAAG,CAAChB,CAAC,CAAC,GAAGR,IAAI,CAACE,CAAC,CAAC,GAAGsC,CAAC,CAAC;IAC9B,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAa,CAAA,EAAW;MAEhB;;MAEA,IAAI7C,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIsC,CAAC,GAAG,GAAG,GAAG5C,IAAI,CAAC,CAAC,GAAGM,CAAC,CAAC,GAAG,GAAG,GAAGJ,IAAI,CAACM,GAAG,CAAC,CAAC,GAAGI,CAAC,CAAC;MAEjD,OAAO,IAAIe,OAAO,CAChBzB,IAAI,CAAC0B,GAAG,CAAChB,CAAC,CAAC,GAAGZ,IAAI,CAACM,CAAC,CAAC,GAAGsC,CAAC,EACzB,CAAC1C,IAAI,CAACM,GAAG,CAACI,CAAC,CAAC,GAAGR,IAAI,CAACE,CAAC,CAAC,GAAGsC,CAAC,CAAC;IAC/B,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAc,CAAA,EAAW;MAEjB;;MAEA,IAAI9C,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIqD,EAAE,GAAG,IAAIhC,OAAO,CAClBrB,CAAC,GAAGA,CAAC,GAAGM,CAAC,GAAGA,CAAC,GAAG,CAAC,EACjB,CAAC,CAAC,GAAGA,CAAC,GAAGN,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;MAEvB,IAAIsD,EAAE,GAAG,IAAIjC,OAAO,CAClBgC,EAAE,CAAC,IAAI,CAAC,GAAGrD,CAAC,EACZqD,EAAE,CAAC,IAAI,CAAC,GAAG/C,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;MAExB,OAAO,IAAIe,OAAO,CAACiC,EAAE,CAAC,IAAI,CAAC,EAAE,CAACA,EAAE,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAC,CAAA,EAAW;MAEjB;;MAEA,IAAIjD,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIqD,EAAE,GAAG,IAAIhC,OAAO,CAClBrB,CAAC,GAAGA,CAAC,GAAGM,CAAC,GAAGA,CAAC,GAAG,CAAC,EACjB,CAAC,CAAC,GAAGA,CAAC,GAAGN,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;MAEvB,IAAIsD,EAAE,GAAG,IAAIjC,OAAO,CAClBgC,EAAE,CAAC,IAAI,CAAC,GAAGrD,CAAC,EACZqD,EAAE,CAAC,IAAI,CAAC,GAAG/C,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;MAExB,OAAO,IAAIe,OAAO,CAACzB,IAAI,CAACK,EAAE,GAAG,CAAC,GAAGqD,EAAE,CAAC,IAAI,CAAC,EAAEA,EAAE,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAE,CAAA,EAAW;MAEjB;;MAEA,IAAIlD,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIM,CAAC,KAAK,CAAC,EAAE;QAEX,IAAIN,CAAC,KAAK,CAAC,EAAE;UACX,OAAO,IAAIqB,OAAO,CAAC,CAAC,EAAEoC,QAAQ,CAAC;QACjC;QAEA,IAAIzD,CAAC,KAAK,CAAC,CAAC,EAAE;UACZ,OAAO,IAAIqB,OAAO,CAAC,CAAC,EAAE,CAACoC,QAAQ,CAAC;QAClC;MACF;MAEA,IAAInB,CAAC,GAAGhC,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAG,GAAGN,CAAC,KAAK,GAAG,GAAGA,CAAC,CAAC;MAErC,IAAIqD,EAAE,GAAG,IAAIhC,OAAO,CAClB,CAAC,CAAC,GAAGrB,CAAC,GAAGA,CAAC,GAAGM,CAAC,GAAGA,CAAC,IAAIgC,CAAC,EACvB,CAAC,CAAC,GAAGhC,CAAC,GAAGgC,CAAC,CAAC,CAACxB,GAAG,CAAC,CAAC;MAEnB,OAAO,IAAIO,OAAO,CAAC,CAAC,GAAG,GAAGgC,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,GAAGA,EAAE,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAK,CAAA,EAAW;MAEjB;;MAEA,IAAIpD,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIA,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,IAAIqB,OAAO,CAACzB,IAAI,CAACmB,KAAK,CAAC,CAAC,EAAET,CAAC,CAAC,EAAE,CAAC,CAAC;MACzC;MAEA,IAAIgC,CAAC,GAAGhC,CAAC,GAAGA,CAAC,GAAGN,CAAC,GAAGA,CAAC;MACrB,OAAQsC,CAAC,KAAK,CAAC,GACX,IAAIjB,OAAO,CACXf,CAAC,GAAGgC,CAAC,EACL,CAACtC,CAAC,GAAGsC,CAAC,CAAC,CAACkB,IAAI,CAAC,CAAC,GACd,IAAInC,OAAO,CACVf,CAAC,KAAK,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EACpBN,CAAC,KAAK,CAAC,GAAI,CAACA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACwD,IAAI,CAAC,CAAC;IACpC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAG,CAAA,EAAW;MAEjB;;MAEA,IAAIrD,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIM,CAAC,KAAK,CAAC,IAAIN,CAAC,KAAK,CAAC,EAAE;QACtB,OAAO,IAAIqB,OAAO,CAAC,CAAC,EAAEoC,QAAQ,CAAC;MACjC;MAEA,IAAInB,CAAC,GAAGhC,CAAC,GAAGA,CAAC,GAAGN,CAAC,GAAGA,CAAC;MACrB,OAAQsC,CAAC,KAAK,CAAC,GACX,IAAIjB,OAAO,CACXf,CAAC,GAAGgC,CAAC,EACL,CAACtC,CAAC,GAAGsC,CAAC,CAAC,CAACiB,IAAI,CAAC,CAAC,GACd,IAAIlC,OAAO,CACVf,CAAC,KAAK,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EACpBN,CAAC,KAAK,CAAC,GAAI,CAACA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACuD,IAAI,CAAC,CAAC;IACpC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAK,CAAA,EAAW;MAEjB;;MAEA,IAAItD,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIM,CAAC,KAAK,CAAC,IAAIN,CAAC,KAAK,CAAC,EAAE;QACtB,OAAO,IAAIqB,OAAO,CAACzB,IAAI,CAACK,EAAE,GAAG,CAAC,EAAEwD,QAAQ,CAAC;MAC3C;MAEA,IAAInB,CAAC,GAAGhC,CAAC,GAAGA,CAAC,GAAGN,CAAC,GAAGA,CAAC;MACrB,OAAQsC,CAAC,KAAK,CAAC,GACX,IAAIjB,OAAO,CACXf,CAAC,GAAGgC,CAAC,EACL,CAACtC,CAAC,GAAGsC,CAAC,CAAC,CAACc,IAAI,CAAC,CAAC,GACd,IAAI/B,OAAO,CACVf,CAAC,KAAK,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EACpBN,CAAC,KAAK,CAAC,GAAI,CAACA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACoD,IAAI,CAAC,CAAC;IACpC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAtD,CAAA,EAAW;MAEjB;;MAEA,IAAIQ,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,OAAO,IAAIqB,OAAO,CAChBvB,IAAI,CAACQ,CAAC,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACF,CAAC,CAAC,EACrBN,IAAI,CAACY,CAAC,CAAC,GAAGV,IAAI,CAAC0B,GAAG,CAACtB,CAAC,CAAC,CAAC;IAC1B,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAN,CAAA,EAAW;MAEjB;;MAEA,IAAIY,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,OAAO,IAAIqB,OAAO,CAChB3B,IAAI,CAACY,CAAC,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACF,CAAC,CAAC,EACrBF,IAAI,CAACQ,CAAC,CAAC,GAAGV,IAAI,CAAC0B,GAAG,CAACtB,CAAC,CAAC,CAAC;IAC1B,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAA6D,CAAA,EAAW;MAEjB;;MAEA,IAAIvD,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACtB,IAAIN,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACtB,IAAIsC,CAAC,GAAG5C,IAAI,CAACY,CAAC,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACF,CAAC,CAAC;MAE7B,OAAO,IAAIqB,OAAO,CAChBvB,IAAI,CAACQ,CAAC,CAAC,GAAGgC,CAAC,EACX1C,IAAI,CAAC0B,GAAG,CAACtB,CAAC,CAAC,GAAGsC,CAAC,CAAC;IACpB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAwB,CAAA,EAAW;MAEjB;;MAEA,IAAIxD,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACtB,IAAIN,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACtB,IAAIsC,CAAC,GAAG5C,IAAI,CAACY,CAAC,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACF,CAAC,CAAC;MAE7B,OAAO,IAAIqB,OAAO,CAChBvB,IAAI,CAACQ,CAAC,CAAC,GAAGgC,CAAC,EACX,CAAC1C,IAAI,CAAC0B,GAAG,CAACtB,CAAC,CAAC,GAAGsC,CAAC,CAAC;IACrB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAAyB,CAAA,EAAW;MAEjB;;MAEA,IAAIzD,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIsC,CAAC,GAAG1C,IAAI,CAACM,GAAG,CAAC,CAAC,GAAGF,CAAC,CAAC,GAAGN,IAAI,CAAC,CAAC,GAAGY,CAAC,CAAC;MAErC,OAAO,IAAIe,OAAO,CAChB,CAAC,CAAC,GAAGvB,IAAI,CAACQ,CAAC,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACF,CAAC,CAAC,GAAGsC,CAAC,EAC9B,CAAC,GAAG5C,IAAI,CAACY,CAAC,CAAC,GAAGV,IAAI,CAAC0B,GAAG,CAACtB,CAAC,CAAC,GAAGsC,CAAC,CAAC;IAClC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAA0B,CAAA,EAAW;MAEjB;;MAEA,IAAI1D,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIsC,CAAC,GAAG1C,IAAI,CAACM,GAAG,CAAC,CAAC,GAAGF,CAAC,CAAC,GAAGN,IAAI,CAAC,CAAC,GAAGY,CAAC,CAAC;MAErC,OAAO,IAAIe,OAAO,CAChB,CAAC,GAAG3B,IAAI,CAACY,CAAC,CAAC,GAAGV,IAAI,CAACM,GAAG,CAACF,CAAC,CAAC,GAAGsC,CAAC,EAC7B,CAAC,CAAC,GAAGxC,IAAI,CAACQ,CAAC,CAAC,GAAGV,IAAI,CAAC0B,GAAG,CAACtB,CAAC,CAAC,GAAGsC,CAAC,CAAC;IACnC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAA2B,CAAA,EAAW;MAElB;;MAEA,IAAInB,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;MACpB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;MACxB,IAAI,CAAC,IAAI,CAAC,GAAGA,GAAG;MAChB,IAAIoB,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;MAExB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;MACxB,IAAI,CAAC,IAAI,CAAC,GAAGpB,GAAG;MAChBA,GAAG,GAAGoB,GAAG,CAAC,IAAI,CAAC;MAEfA,GAAG,CAAC,IAAI,CAAC,GAAG,CAACA,GAAG,CAAC,IAAI,CAAC;MACtBA,GAAG,CAAC,IAAI,CAAC,GAAGpB,GAAG;MACf,OAAOoB,GAAG;IACZ,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAAC,CAAA,EAAW;MAElB;;MAEA,IAAID,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;MACxB,IAAIA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QAClB,IAAIpB,GAAG,GAAGoB,GAAG,CAAC,IAAI,CAAC;QACnBA,GAAG,CAAC,IAAI,CAAC,GAAG,CAACA,GAAG,CAAC,IAAI,CAAC;QACtBA,GAAG,CAAC,IAAI,CAAC,GAAGpB,GAAG;MACjB,CAAC,MAAM;QACL,IAAIA,GAAG,GAAGoB,GAAG,CAAC,IAAI,CAAC;QACnBA,GAAG,CAAC,IAAI,CAAC,GAAG,CAACA,GAAG,CAAC,IAAI,CAAC;QACtBA,GAAG,CAAC,IAAI,CAAC,GAAGpB,GAAG;MACjB;MACA,OAAOoB,GAAG;IACZ,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAAE,CAAA,EAAW;MAElB;;MAEA,IAAI9D,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIqE,IAAI,GAAG/D,CAAC,GAAG,CAAC,IAAIN,CAAC,KAAK,CAAC;MAC3B,IAAIsE,QAAQ,GAAG,CAAC,GAAGhE,CAAC;MACpB,IAAIiE,OAAO,GAAG,CAAC,GAAGjE,CAAC;MACnB,IAAIgC,CAAC,GAAGgC,QAAQ,GAAGA,QAAQ,GAAGtE,CAAC,GAAGA,CAAC;MAEnC,IAAIL,CAAC,GAAI2C,CAAC,KAAK,CAAC,GACZ,IAAIjB,OAAO,CACX,CAACkD,OAAO,GAAGD,QAAQ,GAAGtE,CAAC,GAAGA,CAAC,IAAIsC,CAAC,EAChC,CAACtC,CAAC,GAAGsE,QAAQ,GAAGC,OAAO,GAAGvE,CAAC,IAAIsC,CAAC,CAAC,GACjC,IAAIjB,OAAO,CACVf,CAAC,KAAK,CAAC,CAAC,GAAKA,CAAC,GAAG,CAAC,GAAI,CAAC,EACvBN,CAAC,KAAK,CAAC,GAAKA,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC;MAE5B,IAAIwE,IAAI,GAAG7E,CAAC,CAAC,IAAI,CAAC;MAClBA,CAAC,CAAC,IAAI,CAAC,GAAGgB,QAAQ,CAAChB,CAAC,CAAC,IAAI,CAAC,EAAEA,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;MACxCA,CAAC,CAAC,IAAI,CAAC,GAAGC,IAAI,CAACmB,KAAK,CAACpB,CAAC,CAAC,IAAI,CAAC,EAAE6E,IAAI,CAAC,GAAG,CAAC;MACvC,IAAIH,IAAI,EAAE;QACR1E,CAAC,CAAC,IAAI,CAAC,GAAG,CAACA,CAAC,CAAC,IAAI,CAAC;MACpB;MACA,OAAOA,CAAC;IACV,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAA8E,CAAA,EAAW;MAElB;;MAEA,IAAInE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIM,CAAC,KAAK,CAAC,IAAIN,CAAC,KAAK,CAAC,EAAE;QACtB,OAAO,IAAIqB,OAAO,CAAC,CAAC,EAAEzB,IAAI,CAACK,EAAE,GAAG,CAAC,CAAC;MACpC;MAEA,IAAIqC,CAAC,GAAGhC,CAAC,GAAGA,CAAC,GAAGN,CAAC,GAAGA,CAAC;MACrB,OAAQsC,CAAC,KAAK,CAAC,GACX,IAAIjB,OAAO,CACXf,CAAC,GAAGgC,CAAC,EACL,CAACtC,CAAC,GAAGsC,CAAC,CAAC,CAAC8B,KAAK,CAAC,CAAC,GACf,IAAI/C,OAAO,CACVf,CAAC,KAAK,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EACpBN,CAAC,KAAK,CAAC,GAAI,CAACA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACoE,KAAK,CAAC,CAAC;IACrC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAAM,CAAA,EAAW;MAElB;;MAEA,IAAIpE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIA,CAAC,KAAK,CAAC,EAAE;QAEX,OAAO,IAAIqB,OAAO,CACff,CAAC,KAAK,CAAC,GACJV,IAAI,CAACkB,GAAG,CAACR,CAAC,GAAGV,IAAI,CAACY,IAAI,CAACF,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,CAAC,GAClCmD,QAAQ,EAAE,CAAC,CAAC;MACpB;MAEA,IAAInB,CAAC,GAAGhC,CAAC,GAAGA,CAAC,GAAGN,CAAC,GAAGA,CAAC;MACrB,OAAQsC,CAAC,KAAK,CAAC,GACX,IAAIjB,OAAO,CACXf,CAAC,GAAGgC,CAAC,EACL,CAACtC,CAAC,GAAGsC,CAAC,CAAC,CAAC2B,KAAK,CAAC,CAAC,GACf,IAAI5C,OAAO,CACVf,CAAC,KAAK,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EACpBN,CAAC,KAAK,CAAC,GAAI,CAACA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACiE,KAAK,CAAC,CAAC;IACrC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAAU,CAAA,EAAW;MAElB;;MAEA,IAAIrE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QACpB,OAAOqB,OAAO,CAAC,UAAU,CAAC;MAC5B;MAEA,IAAIiB,CAAC,GAAGhC,CAAC,GAAGA,CAAC,GAAGN,CAAC,GAAGA,CAAC;MACrB,OAAQsC,CAAC,KAAK,CAAC,GACX,IAAIjB,OAAO,CACXf,CAAC,GAAGgC,CAAC,EACL,CAACtC,CAAC,GAAGsC,CAAC,CAAC,CAAC6B,KAAK,CAAC,CAAC,GACf,IAAI9C,OAAO,CACVf,CAAC,KAAK,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EACpBN,CAAC,KAAK,CAAC,GAAI,CAACA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACmE,KAAK,CAAC,CAAC;IACrC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,SAAS,EAAE,SAAAS,CAAA,EAAW;MAEpB;MACA,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QACpB,OAAOvD,OAAO,CAAC,UAAU,CAAC;MAC5B;MAEA,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;QACxB,OAAOA,OAAO,CAAC,MAAM,CAAC;MACxB;MAEA,IAAIf,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAElB,IAAIsC,CAAC,GAAGhC,CAAC,GAAGA,CAAC,GAAGN,CAAC,GAAGA,CAAC;MAErB,OAAO,IAAIqB,OAAO,CAACf,CAAC,GAAGgC,CAAC,EAAE,CAACtC,CAAC,GAAGsC,CAAC,CAAC;IACnC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,WAAW,EAAE,SAAAuC,CAAA,EAAW;MAEtB,OAAO,IAAIxD,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,KAAK,EAAE,SAAAyD,CAAA,EAAW;MAEhB,OAAO,IAAIzD,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,MAAM,EAAE,SAAA0D,CAASC,MAAM,EAAE;MAEvBA,MAAM,GAAGpF,IAAI,CAAC4C,GAAG,CAAC,EAAE,EAAEwC,MAAM,IAAI,CAAC,CAAC;MAElC,OAAO,IAAI3D,OAAO,CAChBzB,IAAI,CAACmF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAGC,MAAM,CAAC,GAAGA,MAAM,EACvCpF,IAAI,CAACmF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAGC,MAAM,CAAC,GAAGA,MAAM,CAAC;IAC5C,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAAC,CAASD,MAAM,EAAE;MAExBA,MAAM,GAAGpF,IAAI,CAAC4C,GAAG,CAAC,EAAE,EAAEwC,MAAM,IAAI,CAAC,CAAC;MAElC,OAAO,IAAI3D,OAAO,CAChBzB,IAAI,CAACqF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAGD,MAAM,CAAC,GAAGA,MAAM,EACxCpF,IAAI,CAACqF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAGD,MAAM,CAAC,GAAGA,MAAM,CAAC;IAC7C,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAAE,CAASF,MAAM,EAAE;MAExBA,MAAM,GAAGpF,IAAI,CAAC4C,GAAG,CAAC,EAAE,EAAEwC,MAAM,IAAI,CAAC,CAAC;MAElC,OAAO,IAAI3D,OAAO,CAChBzB,IAAI,CAACsF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAGF,MAAM,CAAC,GAAGA,MAAM,EACxCpF,IAAI,CAACsF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAGF,MAAM,CAAC,GAAGA,MAAM,CAAC;IAC7C,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,QAAQ,EAAE,SAAAG,CAAS7E,CAAC,EAAEN,CAAC,EAAE;MAEvB,IAAIiB,CAAC,GAAG,IAAII,OAAO,CAACf,CAAC,EAAEN,CAAC,CAAC;MAEzB,OAAOJ,IAAI,CAACW,GAAG,CAACU,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAII,OAAO,CAAC,SAAS,CAAC,IACzDzB,IAAI,CAACW,GAAG,CAACU,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAII,OAAO,CAAC,SAAS,CAAC;IACxD,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAA+D,CAAA,EAAW;MAElB,OAAO,IAAI/D,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,UAAU,EAAE,SAAAgE,CAAA,EAAW;MAErB,IAAI/E,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIN,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MAClB,IAAIsF,GAAG,GAAG,EAAE;MAEZ,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACnB,OAAO,KAAK;MACd;MAEA,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;QACxB,OAAO,UAAU;MACnB;MAEA,IAAI1F,IAAI,CAACW,GAAG,CAACD,CAAC,CAAC,GAAGe,OAAO,CAAC,SAAS,CAAC,EAAE;QACpCf,CAAC,GAAG,CAAC;MACP;MAEA,IAAIV,IAAI,CAACW,GAAG,CAACP,CAAC,CAAC,GAAGqB,OAAO,CAAC,SAAS,CAAC,EAAE;QACpCrB,CAAC,GAAG,CAAC;MACP;;MAEA;MACA,IAAIA,CAAC,KAAK,CAAC,EAAE;QACX,OAAOsF,GAAG,GAAGhF,CAAC;MAChB;MAEA,IAAIA,CAAC,KAAK,CAAC,EAAE;QACXgF,GAAG,IAAIhF,CAAC;QACRgF,GAAG,IAAI,GAAG;QACV,IAAItF,CAAC,GAAG,CAAC,EAAE;UACTA,CAAC,GAAG,CAACA,CAAC;UACNsF,GAAG,IAAI,GAAG;QACZ,CAAC,MAAM;UACLA,GAAG,IAAI,GAAG;QACZ;QACAA,GAAG,IAAI,GAAG;MACZ,CAAC,MAAM,IAAItF,CAAC,GAAG,CAAC,EAAE;QAChBA,CAAC,GAAG,CAACA,CAAC;QACNsF,GAAG,IAAI,GAAG;MACZ;MAEA,IAAI,CAAC,KAAKtF,CAAC,EAAE;QAAE;QACbsF,GAAG,IAAItF,CAAC;MACV;MACA,OAAOsF,GAAG,GAAG,GAAG;IAClB,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,UAAU,EAAE,SAAAC,CAAA,EAAW;MAErB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,SAAS,EAAE,SAAAC,CAAA,EAAW;MAEpB,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC;MACnB;MACA,OAAO,IAAI;IACb,CAAC;IAED;AACJ;AACA;AACA;AACA;IACI,OAAO,EAAE,SAAA1D,CAAA,EAAW;MAClB,OAAOA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAIA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;IACI,QAAQ,EAAE,SAAA2D,CAAA,EAAW;MACnB,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAC7C,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;IACI,UAAU,EAAE,SAAArE,CAAA,EAAW;MACrB,OAAOA,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAIA,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;IACI,YAAY,EAAE,SAAAsE,CAAA,EAAW;MACvB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACjD;EACF,CAAC;EAEDrE,OAAO,CAAC,MAAM,CAAC,GAAG,IAAIA,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EACnCA,OAAO,CAAC,KAAK,CAAC,GAAG,IAAIA,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EAClCA,OAAO,CAAC,GAAG,CAAC,GAAG,IAAIA,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EAChCA,OAAO,CAAC,IAAI,CAAC,GAAG,IAAIA,OAAO,CAACzB,IAAI,CAACK,EAAE,EAAE,CAAC,CAAC;EACvCoB,OAAO,CAAC,GAAG,CAAC,GAAG,IAAIA,OAAO,CAACzB,IAAI,CAAC+F,CAAC,EAAE,CAAC,CAAC;EACrCtE,OAAO,CAAC,UAAU,CAAC,GAAG,IAAIA,OAAO,CAACoC,QAAQ,EAAEA,QAAQ,CAAC;EACrDpC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAIA,OAAO,CAACuE,GAAG,EAAEA,GAAG,CAAC;EACtCvE,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK;EAE1B,IAAI,OAAOwE,MAAM,KAAK,UAAU,IAAIA,MAAM,CAAC,KAAK,CAAC,EAAE;IACjDA,MAAM,CAAC,EAAE,EAAE,YAAW;MACpB,OAAOxE,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC,MAAM,IAAI,OAAOyE,OAAO,KAAK,QAAQ,EAAE;IACtCC,MAAM,CAACC,cAAc,CAAC3E,OAAO,EAAE,YAAY,EAAE;MAAE,OAAO,EAAE;IAAK,CAAC,CAAC;IAC/DA,OAAO,CAAC,SAAS,CAAC,GAAGA,OAAO;IAC5BA,OAAO,CAAC,SAAS,CAAC,GAAGA,OAAO;IAC5B4E,MAAM,CAAC,SAAS,CAAC,GAAG5E,OAAO;EAC7B,CAAC,MAAM;IACL5B,IAAI,CAAC,SAAS,CAAC,GAAG4B,OAAO;EAC3B;AAEF,CAAC,EAAE,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}